
127063857eeaed2dd0c72549d807a72b87e1437f	{"key":"{\"uglify-es\":\"3.3.5\",\"uglifyjs-webpack-plugin\":\"1.1.6\",\"uglifyjs-webpack-plugin-options\":{\"test\":/\\.js$/i,\"warningsFilter\":function () {\n      return true;\n    },\"extractComments\":false,\"sourceMap\":false,\"cache\":true,\"parallel\":true,\"uglifyOptions\":{\"output\":{\"comments\":false}}},\"path\":\"\\u002Fopt\\u002Flampp\\u002Fhtdocs\\u002Fapp\\u002Fdist\\u002Fbundle\\u002Fmain.1f1714ddc43341e90416.bundle.js\",\"input\":\"webpackJsonp([0],{\\n\\n\\u002F***\\u002F 142:\\n\\u002F***\\u002F (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i \\u003C props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = __webpack_require__(0);\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nvar _Breadcrumb = __webpack_require__(144);\\n\\nvar _Breadcrumb2 = _interopRequireDefault(_Breadcrumb);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar Dashboard = function (_Component) {\\n    _inherits(Dashboard, _Component);\\n\\n    function Dashboard() {\\n        _classCallCheck(this, Dashboard);\\n\\n        return _possibleConstructorReturn(this, (Dashboard.__proto__ || Object.getPrototypeOf(Dashboard)).apply(this, arguments));\\n    }\\n\\n    _createClass(Dashboard, [{\\n        key: 'render',\\n        value: function render() {\\n\\n            return _react2.default.createElement(\\n                'div',\\n                { className: 'content' },\\n                _react2.default.createElement(\\n                    'div',\\n                    { className: 'd-none d-sm-none d-md-block' },\\n                    _react2.default.createElement(_Breadcrumb2.default, null)\\n                ),\\n                _react2.default.createElement(\\n                    'div',\\n                    { className: 'card title-card' },\\n                    _react2.default.createElement(\\n                        'div',\\n                        { className: 'row' },\\n                        _react2.default.createElement(\\n                            'div',\\n                            { className: 'col-lg-6' },\\n                            _react2.default.createElement(\\n                                'h4',\\n                                { className: 'main-title' },\\n                                'Add C3 User'\\n                            )\\n                        )\\n                    )\\n                ),\\n                _react2.default.createElement(\\n                    'div',\\n                    { className: 'row margin-0 main-component' },\\n                    _react2.default.createElement(\\n                        'div',\\n                        { className: 'col-lg-2 col-md-2 padding-0 quick-link-div d-none d-sm-none d-md-block' },\\n                        _react2.default.createElement(\\n                            'nav',\\n                            { id: 'navbar-quick-links', className: 'navbar flex-column' },\\n                            _react2.default.createElement(\\n                                'nav',\\n                                { className: 'nav nav-pills flex-column' },\\n                                _react2.default.createElement(\\n                                    'a',\\n                                    { className: 'nav-link', href: '#c3-user-details' },\\n                                    'C3 User Details'\\n                                ),\\n                                _react2.default.createElement(\\n                                    'a',\\n                                    { className: 'nav-link', href: '#c3-user-permissions' },\\n                                    'C3 User Permissions'\\n                                )\\n                            )\\n                        )\\n                    ),\\n                    _react2.default.createElement(\\n                        'div',\\n                        { className: 'col-lg-10 col-md-10 col-sm-12 padding-0 form-div', 'data-spy': 'scroll', 'data-target': '#navbar-quick-links', 'data-offset': '0' },\\n                        _react2.default.createElement(\\n                            'div',\\n                            { className: 'card form-div' },\\n                            _react2.default.createElement(\\n                                'h4',\\n                                { className: 'form-title', id: 'c3-user-details' },\\n                                'C3 User Details'\\n                            ),\\n                            _react2.default.createElement('hr', null),\\n                            _react2.default.createElement('div', { className: 'row' }),\\n                            _react2.default.createElement(\\n                                'h4',\\n                                { className: 'form-title', id: 'c3-user-permissions' },\\n                                'C3 User Permissions'\\n                            ),\\n                            _react2.default.createElement('hr', null),\\n                            _react2.default.createElement('div', { className: 'row' })\\n                        )\\n                    )\\n                )\\n            );\\n        }\\n    }]);\\n\\n    return Dashboard;\\n}(_react.Component);\\n\\nexports.default = Dashboard;\\n\\n\\u002F***\\u002F }),\\n\\n\\u002F***\\u002F 143:\\n\\u002F***\\u002F (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i \\u003C props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = __webpack_require__(0);\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nvar _Breadcrumb = __webpack_require__(144);\\n\\nvar _Breadcrumb2 = _interopRequireDefault(_Breadcrumb);\\n\\nvar _react_jqxinput = __webpack_require__(67);\\n\\nvar _react_jqxinput2 = _interopRequireDefault(_react_jqxinput);\\n\\nvar _react_jqxgrid = __webpack_require__(66);\\n\\nvar _react_jqxgrid2 = _interopRequireDefault(_react_jqxgrid);\\n\\nvar _react_jqxbuttons = __webpack_require__(65);\\n\\nvar _react_jqxbuttons2 = _interopRequireDefault(_react_jqxbuttons);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar AddEditPage = function (_Component) {\\n    _inherits(AddEditPage, _Component);\\n\\n    function AddEditPage() {\\n        _classCallCheck(this, AddEditPage);\\n\\n        return _possibleConstructorReturn(this, (AddEditPage.__proto__ || Object.getPrototypeOf(AddEditPage)).apply(this, arguments));\\n    }\\n\\n    _createClass(AddEditPage, [{\\n        key: 'render',\\n        value: function render() {\\n            var source = {\\n                datatype: 'json',\\n                datafields: [{ name: 'id', type: 'int' }, { name: 'permission', type: 'string' }, { name: 'permissionName', type: 'string' }, { name: 'description', type: 'string' }],\\n                root: 'data',\\n                id: 'id',\\n                url: 'public\\u002FC3_user_manager.json'\\n            };\\n\\n            return _react2.default.createElement(\\n                'div',\\n                { className: 'content' },\\n                _react2.default.createElement(\\n                    'div',\\n                    { className: 'd-none d-sm-none d-md-block' },\\n                    _react2.default.createElement(_Breadcrumb2.default, null)\\n                ),\\n                _react2.default.createElement(\\n                    'div',\\n                    { className: 'card title-card' },\\n                    _react2.default.createElement(\\n                        'div',\\n                        { className: 'row' },\\n                        _react2.default.createElement(\\n                            'div',\\n                            { className: 'col-lg-6' },\\n                            _react2.default.createElement(\\n                                'h4',\\n                                { className: 'main-title' },\\n                                'Add C3 User'\\n                            )\\n                        )\\n                    )\\n                ),\\n                _react2.default.createElement(\\n                    'div',\\n                    { className: 'row margin-0 main-component' },\\n                    _react2.default.createElement(\\n                        'div',\\n                        { className: 'col-lg-2 col-md-2 padding-0 quick-link-div d-none d-sm-none d-md-block' },\\n                        _react2.default.createElement(\\n                            'nav',\\n                            { id: 'navbar-quick-links', className: 'navbar flex-column' },\\n                            _react2.default.createElement(\\n                                'nav',\\n                                { className: 'nav nav-pills flex-column' },\\n                                _react2.default.createElement(\\n                                    'a',\\n                                    { className: 'nav-link', href: '#c3-user-details' },\\n                                    'C3 User Details'\\n                                ),\\n                                _react2.default.createElement(\\n                                    'a',\\n                                    { className: 'nav-link', href: '#c3-user-permissions' },\\n                                    'C3 User Permissions'\\n                                )\\n                            )\\n                        )\\n                    ),\\n                    _react2.default.createElement(\\n                        'div',\\n                        { className: 'col-lg-10 col-md-10 col-sm-12 padding-0 form-div', 'data-spy': 'scroll', 'data-target': '#navbar-quick-links', 'data-offset': '0' },\\n                        _react2.default.createElement(\\n                            'div',\\n                            { className: 'card' },\\n                            _react2.default.createElement(\\n                                'h4',\\n                                { className: 'form-title', id: 'c3-user-details' },\\n                                'C3 User Details'\\n                            ),\\n                            _react2.default.createElement('hr', null),\\n                            _react2.default.createElement(\\n                                'div',\\n                                { className: 'row' },\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-4 col-md-4 col-sm-12' },\\n                                    _react2.default.createElement(\\n                                        'label',\\n                                        { htmlFor: 'add-c3-user-username' },\\n                                        'Username',\\n                                        _react2.default.createElement(\\n                                            'sup',\\n                                            { className: 'label-required' },\\n                                            '*'\\n                                        )\\n                                    ),\\n                                    _react2.default.createElement(_react_jqxinput2.default, { width: '100%', id: 'add-c3-user-username', className: 'add-c3-user-username' })\\n                                )\\n                            ),\\n                            _react2.default.createElement(\\n                                'div',\\n                                { className: 'row' },\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-4 col-md-4 col-sm-12' },\\n                                    _react2.default.createElement(\\n                                        'label',\\n                                        { htmlFor: 'add-c3-user-password' },\\n                                        'Password',\\n                                        _react2.default.createElement(\\n                                            'sup',\\n                                            { className: 'label-required' },\\n                                            '*'\\n                                        )\\n                                    ),\\n                                    _react2.default.createElement(_react_jqxinput2.default, { width: '100%', id: 'add-c3-user-password', className: 'add-c3-user-password' })\\n                                ),\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-4 col-md-4 col-sm-12' },\\n                                    _react2.default.createElement(\\n                                        'label',\\n                                        { htmlFor: 'add-c3-user-retype-password' },\\n                                        'Retype Password',\\n                                        _react2.default.createElement(\\n                                            'sup',\\n                                            { className: 'label-required' },\\n                                            '*'\\n                                        )\\n                                    ),\\n                                    _react2.default.createElement(_react_jqxinput2.default, { width: '100%', id: 'add-c3-user-retype-password', className: 'add-c3-user-retype-password' })\\n                                )\\n                            ),\\n                            _react2.default.createElement(\\n                                'div',\\n                                { className: 'row' },\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-4 col-md-4 col-sm-12' },\\n                                    _react2.default.createElement(\\n                                        'label',\\n                                        { htmlFor: 'add-c3-user-first-name' },\\n                                        'First Name',\\n                                        _react2.default.createElement(\\n                                            'sup',\\n                                            { className: 'label-required' },\\n                                            '*'\\n                                        )\\n                                    ),\\n                                    _react2.default.createElement(_react_jqxinput2.default, { width: '100%', id: 'add-c3-user-first-name', className: 'add-c3-user-first-name' })\\n                                ),\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-4 col-md-4 col-sm-12' },\\n                                    _react2.default.createElement(\\n                                        'label',\\n                                        { htmlFor: 'add-c3-user-last-name' },\\n                                        'Last Name',\\n                                        _react2.default.createElement(\\n                                            'sup',\\n                                            { className: 'label-required' },\\n                                            '*'\\n                                        )\\n                                    ),\\n                                    _react2.default.createElement(_react_jqxinput2.default, { width: '100%', id: 'add-c3-user-last-name', className: 'add-c3-user-last-name' })\\n                                )\\n                            ),\\n                            _react2.default.createElement(\\n                                'div',\\n                                { className: 'row' },\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-4 col-md-4 col-sm-12' },\\n                                    _react2.default.createElement(\\n                                        'label',\\n                                        { htmlFor: 'add-c3-user-phone-number' },\\n                                        'Phone Number',\\n                                        _react2.default.createElement(\\n                                            'sup',\\n                                            { className: 'label-required' },\\n                                            '*'\\n                                        )\\n                                    ),\\n                                    _react2.default.createElement(_react_jqxinput2.default, { width: '100%', id: 'add-c3-user-phone-number', className: 'add-c3-user-phone-number' })\\n                                ),\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-4 col-md-4 col-sm-12' },\\n                                    _react2.default.createElement(\\n                                        'label',\\n                                        { htmlFor: 'add-c3-user-email' },\\n                                        'Email',\\n                                        _react2.default.createElement(\\n                                            'sup',\\n                                            { className: 'label-required' },\\n                                            '*'\\n                                        )\\n                                    ),\\n                                    _react2.default.createElement(_react_jqxinput2.default, { width: '100%', id: 'add-c3-user-email', className: 'add-c3-user-email' })\\n                                )\\n                            ),\\n                            _react2.default.createElement(\\n                                'div',\\n                                { className: 'row' },\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-4 col-md-4 col-sm-12' },\\n                                    _react2.default.createElement(\\n                                        'label',\\n                                        { htmlFor: 'add-c3-user-date-format' },\\n                                        'Date Format',\\n                                        _react2.default.createElement(\\n                                            'sup',\\n                                            { className: 'label-required' },\\n                                            '*'\\n                                        )\\n                                    ),\\n                                    _react2.default.createElement(_react_jqxinput2.default, { width: '100%', id: 'add-c3-user-date-format', className: 'add-c3-user-date-format' })\\n                                ),\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-4 col-md-4 col-sm-12' },\\n                                    _react2.default.createElement(\\n                                        'label',\\n                                        { htmlFor: 'add-c3-user-time-format' },\\n                                        'Time Format',\\n                                        _react2.default.createElement(\\n                                            'sup',\\n                                            { className: 'label-required' },\\n                                            '*'\\n                                        )\\n                                    ),\\n                                    _react2.default.createElement(_react_jqxinput2.default, { width: '100%', id: 'add-c3-user-time-format', className: 'add-c3-user-time-format' })\\n                                )\\n                            ),\\n                            _react2.default.createElement(\\n                                'h4',\\n                                { className: 'form-title', id: 'c3-user-permissions' },\\n                                'C3 User Permissions'\\n                            ),\\n                            _react2.default.createElement('hr', null),\\n                            _react2.default.createElement(\\n                                'h4',\\n                                { className: 'form-title', id: 'c3-user-permissions' },\\n                                'General'\\n                            ),\\n                            _react2.default.createElement(\\n                                'div',\\n                                { className: 'row' },\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-12' },\\n                                    _react2.default.createElement(_react_jqxgrid2.default, {\\n                                        width: '100%',\\n                                        autoheight: true,\\n                                        source: new _react_jqxgrid.jqx.dataAdapter(source, {\\n                                            downloadComplete: function downloadComplete(data, status, xhr) {\\n                                                source.totalrecords = data.data.totalRecords;\\n                                                return data.data.records;\\n                                            }\\n                                        }),\\n                                        columns: [{ text: 'Permission', datafield: 'permissionName', width: \\\"25%\\\", minwidth: \\\"150px\\\" }, { text: 'Description', datafield: 'description', width: \\\"72.1%\\\", minwidth: \\\"300px\\\" }],\\n                                        selectionmode: 'checkbox'\\n                                    })\\n                                )\\n                            ),\\n                            _react2.default.createElement('hr', null),\\n                            _react2.default.createElement(\\n                                'div',\\n                                { className: 'row form-button-div' },\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-1' },\\n                                    _react2.default.createElement(_react_jqxbuttons2.default, { value: 'Cancel', height: '25px', width: '60px' })\\n                                ),\\n                                _react2.default.createElement(\\n                                    'div',\\n                                    { className: 'col-lg-1' },\\n                                    _react2.default.createElement(_react_jqxbuttons2.default, { value: 'Save', className: 'save-button', height: '25px', width: '60px' })\\n                                )\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n        }\\n    }]);\\n\\n    return AddEditPage;\\n}(_react.Component);\\n\\nexports.default = AddEditPage;\\n\\n\\u002F***\\u002F }),\\n\\n\\u002F***\\u002F 144:\\n\\u002F***\\u002F (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i \\u003C props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = __webpack_require__(0);\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nvar _reactRouterDom = __webpack_require__(30);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar Breadcrumb = function (_Component) {\\n    _inherits(Breadcrumb, _Component);\\n\\n    function Breadcrumb() {\\n        _classCallCheck(this, Breadcrumb);\\n\\n        return _possibleConstructorReturn(this, (Breadcrumb.__proto__ || Object.getPrototypeOf(Breadcrumb)).apply(this, arguments));\\n    }\\n\\n    _createClass(Breadcrumb, [{\\n        key: 'render',\\n        value: function render() {\\n            return _react2.default.createElement(\\n                'nav',\\n                { 'aria-label': 'breadcrumb' },\\n                _react2.default.createElement(\\n                    'ol',\\n                    { className: 'breadcrumb' },\\n                    _react2.default.createElement(\\n                        'li',\\n                        { className: 'breadcrumb-item' },\\n                        _react2.default.createElement(\\n                            _reactRouterDom.Link,\\n                            { to: '#' },\\n                            'Home'\\n                        )\\n                    ),\\n                    _react2.default.createElement(\\n                        'li',\\n                        { className: 'breadcrumb-item' },\\n                        _react2.default.createElement(\\n                            'a',\\n                            { href: '#' },\\n                            'Accounts & Users'\\n                        )\\n                    ),\\n                    _react2.default.createElement(\\n                        'li',\\n                        { className: 'breadcrumb-item' },\\n                        _react2.default.createElement(\\n                            _reactRouterDom.Link,\\n                            { to: 'c3-user-add' },\\n                            'C3 User Manager'\\n                        )\\n                    ),\\n                    _react2.default.createElement(\\n                        'li',\\n                        { className: 'breadcrumb-item active', 'aria-current': 'page' },\\n                        'Add C3 User'\\n                    )\\n                )\\n            );\\n        }\\n    }]);\\n\\n    return Breadcrumb;\\n}(_react.Component);\\n\\nexports.default = Breadcrumb;\\n\\n\\u002F***\\u002F }),\\n\\n\\u002F***\\u002F 65:\\n\\u002F***\\u002F (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports.jqx = undefined;\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i \\u003C props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = __webpack_require__(0);\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } \\u002F*\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               jQWidgets v5.5.0 (2017-Dec)\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Copyright (c) 2011-2017 jQWidgets.\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               License: https:\\u002F\\u002Fjqwidgets.com\\u002Flicense\\u002F\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\\u002F\\n\\nvar JQXLite = window.JQXLite;\\n\\nvar jqx = exports.jqx = window.jqx;\\n\\nvar JqxButton = function (_React$Component) {\\n    _inherits(JqxButton, _React$Component);\\n\\n    function JqxButton() {\\n        _classCallCheck(this, JqxButton);\\n\\n        return _possibleConstructorReturn(this, (JqxButton.__proto__ || Object.getPrototypeOf(JqxButton)).apply(this, arguments));\\n    }\\n\\n    _createClass(JqxButton, [{\\n        key: 'componentDidMount',\\n        value: function componentDidMount() {\\n            var options = this.manageAttributes();\\n            this.createComponent(options);\\n        }\\n    }, {\\n        key: 'manageAttributes',\\n        value: function manageAttributes() {\\n            var properties = ['delay', 'disabled', 'height', 'imgSrc', 'imgWidth', 'imgHeight', 'imgPosition', 'roundedCorners', 'rtl', 'textPosition', 'textImageRelation', 'theme', 'template', 'toggled', 'width', 'value'];\\n            var options = {};\\n            for (var item in this.props) {\\n                if (item === 'settings') {\\n                    for (var itemTwo in this.props[item]) {\\n                        options[itemTwo] = this.props[item][itemTwo];\\n                    }\\n                } else {\\n                    if (properties.indexOf(item) !== -1) {\\n                        options[item] = this.props[item];\\n                    }\\n                }\\n            }\\n            return options;\\n        }\\n    }, {\\n        key: 'createComponent',\\n        value: function createComponent(options) {\\n            if (!this.style) {\\n                for (var style in this.props.style) {\\n                    JQXLite(this.componentSelector).css(style, this.props.style[style]);\\n                }\\n            }\\n            if (this.props.className !== undefined) {\\n                var classes = this.props.className.split(' ');\\n                for (var i = 0; i \\u003C classes.length; i++) {\\n                    JQXLite(this.componentSelector).addClass(classes[i]);\\n                }\\n            }\\n            if (!this.template) {\\n                JQXLite(this.componentSelector).html(this.props.template);\\n            }\\n            JQXLite(this.componentSelector).jqxButton(options);\\n        }\\n    }, {\\n        key: 'setOptions',\\n        value: function setOptions(options) {\\n            JQXLite(this.componentSelector).jqxButton('setOptions', options);\\n        }\\n    }, {\\n        key: 'getOptions',\\n        value: function getOptions() {\\n            if (arguments.length === 0) {\\n                throw Error('At least one argument expected in getOptions()!');\\n            }\\n            var resultToReturn = {};\\n            for (var i = 0; i \\u003C arguments.length; i++) {\\n                resultToReturn[arguments[i]] = JQXLite(this.componentSelector).jqxButton(arguments[i]);\\n            }\\n            return resultToReturn;\\n        }\\n    }, {\\n        key: 'on',\\n        value: function on(name, callbackFn) {\\n            JQXLite(this.componentSelector).on(name, callbackFn);\\n        }\\n    }, {\\n        key: 'off',\\n        value: function off(name) {\\n            JQXLite(this.componentSelector).off(name);\\n        }\\n    }, {\\n        key: 'delay',\\n        value: function delay(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('delay', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('delay');\\n            }\\n        }\\n    }, {\\n        key: 'disabled',\\n        value: function disabled(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('disabled', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('disabled');\\n            }\\n        }\\n    }, {\\n        key: 'height',\\n        value: function height(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('height', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('height');\\n            }\\n        }\\n    }, {\\n        key: 'imgSrc',\\n        value: function imgSrc(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('imgSrc', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('imgSrc');\\n            }\\n        }\\n    }, {\\n        key: 'imgWidth',\\n        value: function imgWidth(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('imgWidth', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('imgWidth');\\n            }\\n        }\\n    }, {\\n        key: 'imgHeight',\\n        value: function imgHeight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('imgHeight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('imgHeight');\\n            }\\n        }\\n    }, {\\n        key: 'imgPosition',\\n        value: function imgPosition(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('imgPosition', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('imgPosition');\\n            }\\n        }\\n    }, {\\n        key: 'roundedCorners',\\n        value: function roundedCorners(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('roundedCorners', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('roundedCorners');\\n            }\\n        }\\n    }, {\\n        key: 'rtl',\\n        value: function rtl(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('rtl', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('rtl');\\n            }\\n        }\\n    }, {\\n        key: 'textPosition',\\n        value: function textPosition(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('textPosition', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('textPosition');\\n            }\\n        }\\n    }, {\\n        key: 'textImageRelation',\\n        value: function textImageRelation(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('textImageRelation', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('textImageRelation');\\n            }\\n        }\\n    }, {\\n        key: 'theme',\\n        value: function theme(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('theme', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('theme');\\n            }\\n        }\\n    }, {\\n        key: 'template',\\n        value: function template(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('template', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('template');\\n            }\\n        }\\n    }, {\\n        key: 'toggled',\\n        value: function toggled(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('toggled', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('toggled');\\n            }\\n        }\\n    }, {\\n        key: 'width',\\n        value: function width(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('width', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('width');\\n            }\\n        }\\n    }, {\\n        key: 'value',\\n        value: function value(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('value', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('value');\\n            }\\n        }\\n    }, {\\n        key: 'check',\\n        value: function check() {\\n            JQXLite(this.componentSelector).jqxButton('check');\\n        }\\n    }, {\\n        key: 'destroy',\\n        value: function destroy() {\\n            JQXLite(this.componentSelector).jqxButton('destroy');\\n        }\\n    }, {\\n        key: 'focus',\\n        value: function focus() {\\n            JQXLite(this.componentSelector).jqxButton('focus');\\n        }\\n    }, {\\n        key: 'performRender',\\n        value: function performRender() {\\n            JQXLite(this.componentSelector).jqxButton('render');\\n        }\\n    }, {\\n        key: 'toggle',\\n        value: function toggle() {\\n            JQXLite(this.componentSelector).jqxButton('toggle');\\n        }\\n    }, {\\n        key: 'unCheck',\\n        value: function unCheck() {\\n            JQXLite(this.componentSelector).jqxButton('unCheck');\\n        }\\n    }, {\\n        key: 'val',\\n        value: function val(value) {\\n            if (value !== undefined) {\\n                JQXLite(this.componentSelector).jqxButton('val', value);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxButton('val');\\n            }\\n        }\\n    }, {\\n        key: 'render',\\n        value: function render() {\\n            var id = 'jqxButton' + JQXLite.generateID();\\n            this.componentSelector = '#' + id;\\n            return _react2.default.createElement(\\n                'div',\\n                { id: id },\\n                this.props.value,\\n                this.props.children\\n            );\\n        }\\n    }]);\\n\\n    return JqxButton;\\n}(_react2.default.Component);\\n\\nexports.default = JqxButton;\\n;\\n\\n\\u002F***\\u002F }),\\n\\n\\u002F***\\u002F 66:\\n\\u002F***\\u002F (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports.jqx = undefined;\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i \\u003C props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = __webpack_require__(0);\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } \\u002F*\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               jQWidgets v5.5.0 (2017-Dec)\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Copyright (c) 2011-2017 jQWidgets.\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               License: https:\\u002F\\u002Fjqwidgets.com\\u002Flicense\\u002F\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\\u002F\\n\\nvar JQXLite = window.JQXLite;\\n\\nvar jqx = exports.jqx = window.jqx;\\n\\nvar JqxGrid = function (_React$Component) {\\n    _inherits(JqxGrid, _React$Component);\\n\\n    function JqxGrid() {\\n        _classCallCheck(this, JqxGrid);\\n\\n        return _possibleConstructorReturn(this, (JqxGrid.__proto__ || Object.getPrototypeOf(JqxGrid)).apply(this, arguments));\\n    }\\n\\n    _createClass(JqxGrid, [{\\n        key: 'componentDidMount',\\n        value: function componentDidMount() {\\n            var options = this.manageAttributes();\\n            this.createComponent(options);\\n        }\\n    }, {\\n        key: 'manageAttributes',\\n        value: function manageAttributes() {\\n            var properties = ['altrows', 'altstart', 'altstep', 'autoshowloadelement', 'autoshowfiltericon', 'autoshowcolumnsmenubutton', 'clipboard', 'closeablegroups', 'columnsmenuwidth', 'columnmenuopening', 'columnmenuclosing', 'cellhover', 'enablekeyboarddelete', 'enableellipsis', 'enablemousewheel', 'enableanimations', 'enabletooltips', 'enablehover', 'enablebrowserselection', 'everpresentrowposition', 'everpresentrowheight', 'everpresentrowactions', 'everpresentrowactionsmode', 'filterrowheight', 'filtermode', 'groupsrenderer', 'groupcolumnrenderer', 'groupsexpandedbydefault', 'handlekeyboardnavigation', 'pagerrenderer', 'rtl', 'showdefaultloadelement', 'showfiltercolumnbackground', 'showfiltermenuitems', 'showpinnedcolumnbackground', 'showsortcolumnbackground', 'showsortmenuitems', 'showgroupmenuitems', 'showrowdetailscolumn', 'showheader', 'showgroupsheader', 'showaggregates', 'showgroupaggregates', 'showeverpresentrow', 'showfilterrow', 'showemptyrow', 'showstatusbar', 'statusbarheight', 'showtoolbar', 'selectionmode', 'updatefilterconditions', 'updatefilterpanel', 'theme', 'toolbarheight', 'autoheight', 'autorowheight', 'columnsheight', 'deferreddatafields', 'groupsheaderheight', 'groupindentwidth', 'height', 'pagerheight', 'rowsheight', 'scrollbarsize', 'scrollmode', 'scrollfeedback', 'width', 'autosavestate', 'autoloadstate', 'columns', 'columngroups', 'columnsmenu', 'columnsresize', 'columnsautoresize', 'columnsreorder', 'disabled', 'editable', 'editmode', 'filter', 'filterable', 'groupable', 'groups', 'horizontalscrollbarstep', 'horizontalscrollbarlargestep', 'initrowdetails', 'keyboardnavigation', 'localization', 'pagesize', 'pagesizeoptions', 'pagermode', 'pagerbuttonscount', 'pageable', 'rowdetails', 'rowdetailstemplate', 'ready', 'rendered', 'renderstatusbar', 'rendertoolbar', 'rendergridrows', 'sortable', 'selectedrowindex', 'selectedrowindexes', 'source', 'sorttogglestates', 'updatedelay', 'virtualmode', 'verticalscrollbarstep', 'verticalscrollbarlargestep'];\\n            var options = {};\\n            for (var item in this.props) {\\n                if (item === 'settings') {\\n                    for (var itemTwo in this.props[item]) {\\n                        options[itemTwo] = this.props[item][itemTwo];\\n                    }\\n                } else {\\n                    if (properties.indexOf(item) !== -1) {\\n                        options[item] = this.props[item];\\n                    }\\n                }\\n            }\\n            return options;\\n        }\\n    }, {\\n        key: 'createComponent',\\n        value: function createComponent(options) {\\n            if (!this.style) {\\n                for (var style in this.props.style) {\\n                    JQXLite(this.componentSelector).css(style, this.props.style[style]);\\n                }\\n            }\\n            if (this.props.className !== undefined) {\\n                var classes = this.props.className.split(' ');\\n                for (var i = 0; i \\u003C classes.length; i++) {\\n                    JQXLite(this.componentSelector).addClass(classes[i]);\\n                }\\n            }\\n            if (!this.template) {\\n                JQXLite(this.componentSelector).html(this.props.template);\\n            }\\n            JQXLite(this.componentSelector).jqxGrid(options);\\n        }\\n    }, {\\n        key: 'setOptions',\\n        value: function setOptions(options) {\\n            JQXLite(this.componentSelector).jqxGrid('setOptions', options);\\n        }\\n    }, {\\n        key: 'getOptions',\\n        value: function getOptions() {\\n            if (arguments.length === 0) {\\n                throw Error('At least one argument expected in getOptions()!');\\n            }\\n            var resultToReturn = {};\\n            for (var i = 0; i \\u003C arguments.length; i++) {\\n                resultToReturn[arguments[i]] = JQXLite(this.componentSelector).jqxGrid(arguments[i]);\\n            }\\n            return resultToReturn;\\n        }\\n    }, {\\n        key: 'on',\\n        value: function on(name, callbackFn) {\\n            JQXLite(this.componentSelector).on(name, callbackFn);\\n        }\\n    }, {\\n        key: 'off',\\n        value: function off(name) {\\n            JQXLite(this.componentSelector).off(name);\\n        }\\n    }, {\\n        key: 'altrows',\\n        value: function altrows(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('altrows', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('altrows');\\n            }\\n        }\\n    }, {\\n        key: 'altstart',\\n        value: function altstart(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('altstart', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('altstart');\\n            }\\n        }\\n    }, {\\n        key: 'altstep',\\n        value: function altstep(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('altstep', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('altstep');\\n            }\\n        }\\n    }, {\\n        key: 'autoshowloadelement',\\n        value: function autoshowloadelement(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('autoshowloadelement', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('autoshowloadelement');\\n            }\\n        }\\n    }, {\\n        key: 'autoshowfiltericon',\\n        value: function autoshowfiltericon(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('autoshowfiltericon', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('autoshowfiltericon');\\n            }\\n        }\\n    }, {\\n        key: 'autoshowcolumnsmenubutton',\\n        value: function autoshowcolumnsmenubutton(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('autoshowcolumnsmenubutton', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('autoshowcolumnsmenubutton');\\n            }\\n        }\\n    }, {\\n        key: 'clipboard',\\n        value: function clipboard(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('clipboard', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('clipboard');\\n            }\\n        }\\n    }, {\\n        key: 'closeablegroups',\\n        value: function closeablegroups(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('closeablegroups', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('closeablegroups');\\n            }\\n        }\\n    }, {\\n        key: 'columnsmenuwidth',\\n        value: function columnsmenuwidth(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('columnsmenuwidth', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('columnsmenuwidth');\\n            }\\n        }\\n    }, {\\n        key: 'columnmenuopening',\\n        value: function columnmenuopening(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('columnmenuopening', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('columnmenuopening');\\n            }\\n        }\\n    }, {\\n        key: 'columnmenuclosing',\\n        value: function columnmenuclosing(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('columnmenuclosing', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('columnmenuclosing');\\n            }\\n        }\\n    }, {\\n        key: 'cellhover',\\n        value: function cellhover(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('cellhover', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('cellhover');\\n            }\\n        }\\n    }, {\\n        key: 'enablekeyboarddelete',\\n        value: function enablekeyboarddelete(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('enablekeyboarddelete', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('enablekeyboarddelete');\\n            }\\n        }\\n    }, {\\n        key: 'enableellipsis',\\n        value: function enableellipsis(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('enableellipsis', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('enableellipsis');\\n            }\\n        }\\n    }, {\\n        key: 'enablemousewheel',\\n        value: function enablemousewheel(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('enablemousewheel', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('enablemousewheel');\\n            }\\n        }\\n    }, {\\n        key: 'enableanimations',\\n        value: function enableanimations(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('enableanimations', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('enableanimations');\\n            }\\n        }\\n    }, {\\n        key: 'enabletooltips',\\n        value: function enabletooltips(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('enabletooltips', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('enabletooltips');\\n            }\\n        }\\n    }, {\\n        key: 'enablehover',\\n        value: function enablehover(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('enablehover', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('enablehover');\\n            }\\n        }\\n    }, {\\n        key: 'enablebrowserselection',\\n        value: function enablebrowserselection(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('enablebrowserselection', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('enablebrowserselection');\\n            }\\n        }\\n    }, {\\n        key: 'everpresentrowposition',\\n        value: function everpresentrowposition(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('everpresentrowposition', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('everpresentrowposition');\\n            }\\n        }\\n    }, {\\n        key: 'everpresentrowheight',\\n        value: function everpresentrowheight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('everpresentrowheight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('everpresentrowheight');\\n            }\\n        }\\n    }, {\\n        key: 'everpresentrowactions',\\n        value: function everpresentrowactions(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('everpresentrowactions', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('everpresentrowactions');\\n            }\\n        }\\n    }, {\\n        key: 'everpresentrowactionsmode',\\n        value: function everpresentrowactionsmode(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('everpresentrowactionsmode', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('everpresentrowactionsmode');\\n            }\\n        }\\n    }, {\\n        key: 'filterrowheight',\\n        value: function filterrowheight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('filterrowheight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('filterrowheight');\\n            }\\n        }\\n    }, {\\n        key: 'filtermode',\\n        value: function filtermode(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('filtermode', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('filtermode');\\n            }\\n        }\\n    }, {\\n        key: 'groupsrenderer',\\n        value: function groupsrenderer(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('groupsrenderer', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('groupsrenderer');\\n            }\\n        }\\n    }, {\\n        key: 'groupcolumnrenderer',\\n        value: function groupcolumnrenderer(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('groupcolumnrenderer', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('groupcolumnrenderer');\\n            }\\n        }\\n    }, {\\n        key: 'groupsexpandedbydefault',\\n        value: function groupsexpandedbydefault(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('groupsexpandedbydefault', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('groupsexpandedbydefault');\\n            }\\n        }\\n    }, {\\n        key: 'handlekeyboardnavigation',\\n        value: function handlekeyboardnavigation(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('handlekeyboardnavigation', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('handlekeyboardnavigation');\\n            }\\n        }\\n    }, {\\n        key: 'pagerrenderer',\\n        value: function pagerrenderer(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('pagerrenderer', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('pagerrenderer');\\n            }\\n        }\\n    }, {\\n        key: 'rtl',\\n        value: function rtl(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('rtl', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('rtl');\\n            }\\n        }\\n    }, {\\n        key: 'showdefaultloadelement',\\n        value: function showdefaultloadelement(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showdefaultloadelement', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showdefaultloadelement');\\n            }\\n        }\\n    }, {\\n        key: 'showfiltercolumnbackground',\\n        value: function showfiltercolumnbackground(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showfiltercolumnbackground', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showfiltercolumnbackground');\\n            }\\n        }\\n    }, {\\n        key: 'showfiltermenuitems',\\n        value: function showfiltermenuitems(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showfiltermenuitems', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showfiltermenuitems');\\n            }\\n        }\\n    }, {\\n        key: 'showpinnedcolumnbackground',\\n        value: function showpinnedcolumnbackground(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showpinnedcolumnbackground', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showpinnedcolumnbackground');\\n            }\\n        }\\n    }, {\\n        key: 'showsortcolumnbackground',\\n        value: function showsortcolumnbackground(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showsortcolumnbackground', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showsortcolumnbackground');\\n            }\\n        }\\n    }, {\\n        key: 'showsortmenuitems',\\n        value: function showsortmenuitems(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showsortmenuitems', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showsortmenuitems');\\n            }\\n        }\\n    }, {\\n        key: 'showgroupmenuitems',\\n        value: function showgroupmenuitems(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showgroupmenuitems', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showgroupmenuitems');\\n            }\\n        }\\n    }, {\\n        key: 'showrowdetailscolumn',\\n        value: function showrowdetailscolumn(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showrowdetailscolumn', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showrowdetailscolumn');\\n            }\\n        }\\n    }, {\\n        key: 'showheader',\\n        value: function showheader(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showheader', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showheader');\\n            }\\n        }\\n    }, {\\n        key: 'showgroupsheader',\\n        value: function showgroupsheader(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showgroupsheader', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showgroupsheader');\\n            }\\n        }\\n    }, {\\n        key: 'showaggregates',\\n        value: function showaggregates(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showaggregates', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showaggregates');\\n            }\\n        }\\n    }, {\\n        key: 'showgroupaggregates',\\n        value: function showgroupaggregates(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showgroupaggregates', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showgroupaggregates');\\n            }\\n        }\\n    }, {\\n        key: 'showeverpresentrow',\\n        value: function showeverpresentrow(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showeverpresentrow', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showeverpresentrow');\\n            }\\n        }\\n    }, {\\n        key: 'showfilterrow',\\n        value: function showfilterrow(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showfilterrow', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showfilterrow');\\n            }\\n        }\\n    }, {\\n        key: 'showemptyrow',\\n        value: function showemptyrow(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showemptyrow', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showemptyrow');\\n            }\\n        }\\n    }, {\\n        key: 'showstatusbar',\\n        value: function showstatusbar(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showstatusbar', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showstatusbar');\\n            }\\n        }\\n    }, {\\n        key: 'statusbarheight',\\n        value: function statusbarheight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('statusbarheight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('statusbarheight');\\n            }\\n        }\\n    }, {\\n        key: 'showtoolbar',\\n        value: function showtoolbar(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('showtoolbar', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('showtoolbar');\\n            }\\n        }\\n    }, {\\n        key: 'selectionmode',\\n        value: function selectionmode(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('selectionmode', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('selectionmode');\\n            }\\n        }\\n    }, {\\n        key: 'updatefilterconditions',\\n        value: function updatefilterconditions(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('updatefilterconditions', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('updatefilterconditions');\\n            }\\n        }\\n    }, {\\n        key: 'updatefilterpanel',\\n        value: function updatefilterpanel(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('updatefilterpanel', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('updatefilterpanel');\\n            }\\n        }\\n    }, {\\n        key: 'theme',\\n        value: function theme(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('theme', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('theme');\\n            }\\n        }\\n    }, {\\n        key: 'toolbarheight',\\n        value: function toolbarheight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('toolbarheight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('toolbarheight');\\n            }\\n        }\\n    }, {\\n        key: 'autoheight',\\n        value: function autoheight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('autoheight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('autoheight');\\n            }\\n        }\\n    }, {\\n        key: 'autorowheight',\\n        value: function autorowheight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('autorowheight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('autorowheight');\\n            }\\n        }\\n    }, {\\n        key: 'columnsheight',\\n        value: function columnsheight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('columnsheight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('columnsheight');\\n            }\\n        }\\n    }, {\\n        key: 'deferreddatafields',\\n        value: function deferreddatafields(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('deferreddatafields', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('deferreddatafields');\\n            }\\n        }\\n    }, {\\n        key: 'groupsheaderheight',\\n        value: function groupsheaderheight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('groupsheaderheight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('groupsheaderheight');\\n            }\\n        }\\n    }, {\\n        key: 'groupindentwidth',\\n        value: function groupindentwidth(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('groupindentwidth', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('groupindentwidth');\\n            }\\n        }\\n    }, {\\n        key: 'height',\\n        value: function height(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('height', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('height');\\n            }\\n        }\\n    }, {\\n        key: 'pagerheight',\\n        value: function pagerheight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('pagerheight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('pagerheight');\\n            }\\n        }\\n    }, {\\n        key: 'rowsheight',\\n        value: function rowsheight(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('rowsheight', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('rowsheight');\\n            }\\n        }\\n    }, {\\n        key: 'scrollbarsize',\\n        value: function scrollbarsize(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('scrollbarsize', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('scrollbarsize');\\n            }\\n        }\\n    }, {\\n        key: 'scrollmode',\\n        value: function scrollmode(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('scrollmode', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('scrollmode');\\n            }\\n        }\\n    }, {\\n        key: 'scrollfeedback',\\n        value: function scrollfeedback(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('scrollfeedback', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('scrollfeedback');\\n            }\\n        }\\n    }, {\\n        key: 'width',\\n        value: function width(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('width', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('width');\\n            }\\n        }\\n    }, {\\n        key: 'autosavestate',\\n        value: function autosavestate(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('autosavestate', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('autosavestate');\\n            }\\n        }\\n    }, {\\n        key: 'autoloadstate',\\n        value: function autoloadstate(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('autoloadstate', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('autoloadstate');\\n            }\\n        }\\n    }, {\\n        key: 'columns',\\n        value: function columns(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('columns', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('columns');\\n            }\\n        }\\n    }, {\\n        key: 'columngroups',\\n        value: function columngroups(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('columngroups', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('columngroups');\\n            }\\n        }\\n    }, {\\n        key: 'columnsmenu',\\n        value: function columnsmenu(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('columnsmenu', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('columnsmenu');\\n            }\\n        }\\n    }, {\\n        key: 'columnsresize',\\n        value: function columnsresize(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('columnsresize', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('columnsresize');\\n            }\\n        }\\n    }, {\\n        key: 'columnsautoresize',\\n        value: function columnsautoresize(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('columnsautoresize', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('columnsautoresize');\\n            }\\n        }\\n    }, {\\n        key: 'columnsreorder',\\n        value: function columnsreorder(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('columnsreorder', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('columnsreorder');\\n            }\\n        }\\n    }, {\\n        key: 'disabled',\\n        value: function disabled(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('disabled', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('disabled');\\n            }\\n        }\\n    }, {\\n        key: 'editable',\\n        value: function editable(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('editable', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('editable');\\n            }\\n        }\\n    }, {\\n        key: 'editmode',\\n        value: function editmode(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('editmode', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('editmode');\\n            }\\n        }\\n    }, {\\n        key: 'filter',\\n        value: function filter(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('filter', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('filter');\\n            }\\n        }\\n    }, {\\n        key: 'filterable',\\n        value: function filterable(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('filterable', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('filterable');\\n            }\\n        }\\n    }, {\\n        key: 'groupable',\\n        value: function groupable(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('groupable', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('groupable');\\n            }\\n        }\\n    }, {\\n        key: 'groups',\\n        value: function groups(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('groups', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('groups');\\n            }\\n        }\\n    }, {\\n        key: 'horizontalscrollbarstep',\\n        value: function horizontalscrollbarstep(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('horizontalscrollbarstep', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('horizontalscrollbarstep');\\n            }\\n        }\\n    }, {\\n        key: 'horizontalscrollbarlargestep',\\n        value: function horizontalscrollbarlargestep(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('horizontalscrollbarlargestep', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('horizontalscrollbarlargestep');\\n            }\\n        }\\n    }, {\\n        key: 'initrowdetails',\\n        value: function initrowdetails(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('initrowdetails', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('initrowdetails');\\n            }\\n        }\\n    }, {\\n        key: 'keyboardnavigation',\\n        value: function keyboardnavigation(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('keyboardnavigation', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('keyboardnavigation');\\n            }\\n        }\\n    }, {\\n        key: 'localization',\\n        value: function localization(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('localization', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('localization');\\n            }\\n        }\\n    }, {\\n        key: 'pagesize',\\n        value: function pagesize(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('pagesize', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('pagesize');\\n            }\\n        }\\n    }, {\\n        key: 'pagesizeoptions',\\n        value: function pagesizeoptions(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('pagesizeoptions', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('pagesizeoptions');\\n            }\\n        }\\n    }, {\\n        key: 'pagermode',\\n        value: function pagermode(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('pagermode', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('pagermode');\\n            }\\n        }\\n    }, {\\n        key: 'pagerbuttonscount',\\n        value: function pagerbuttonscount(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('pagerbuttonscount', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('pagerbuttonscount');\\n            }\\n        }\\n    }, {\\n        key: 'pageable',\\n        value: function pageable(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('pageable', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('pageable');\\n            }\\n        }\\n    }, {\\n        key: 'rowdetails',\\n        value: function rowdetails(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('rowdetails', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('rowdetails');\\n            }\\n        }\\n    }, {\\n        key: 'rowdetailstemplate',\\n        value: function rowdetailstemplate(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('rowdetailstemplate', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('rowdetailstemplate');\\n            }\\n        }\\n    }, {\\n        key: 'ready',\\n        value: function ready(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('ready', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('ready');\\n            }\\n        }\\n    }, {\\n        key: 'rendered',\\n        value: function rendered(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('rendered', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('rendered');\\n            }\\n        }\\n    }, {\\n        key: 'renderstatusbar',\\n        value: function renderstatusbar(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('renderstatusbar', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('renderstatusbar');\\n            }\\n        }\\n    }, {\\n        key: 'rendertoolbar',\\n        value: function rendertoolbar(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('rendertoolbar', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('rendertoolbar');\\n            }\\n        }\\n    }, {\\n        key: 'rendergridrows',\\n        value: function rendergridrows(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('rendergridrows', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('rendergridrows');\\n            }\\n        }\\n    }, {\\n        key: 'sortable',\\n        value: function sortable(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('sortable', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('sortable');\\n            }\\n        }\\n    }, {\\n        key: 'selectedrowindex',\\n        value: function selectedrowindex(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('selectedrowindex', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('selectedrowindex');\\n            }\\n        }\\n    }, {\\n        key: 'selectedrowindexes',\\n        value: function selectedrowindexes(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('selectedrowindexes', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('selectedrowindexes');\\n            }\\n        }\\n    }, {\\n        key: 'source',\\n        value: function source(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('source', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('source');\\n            }\\n        }\\n    }, {\\n        key: 'sorttogglestates',\\n        value: function sorttogglestates(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('sorttogglestates', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('sorttogglestates');\\n            }\\n        }\\n    }, {\\n        key: 'updatedelay',\\n        value: function updatedelay(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('updatedelay', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('updatedelay');\\n            }\\n        }\\n    }, {\\n        key: 'virtualmode',\\n        value: function virtualmode(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('virtualmode', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('virtualmode');\\n            }\\n        }\\n    }, {\\n        key: 'verticalscrollbarstep',\\n        value: function verticalscrollbarstep(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('verticalscrollbarstep', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('verticalscrollbarstep');\\n            }\\n        }\\n    }, {\\n        key: 'verticalscrollbarlargestep',\\n        value: function verticalscrollbarlargestep(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxGrid('verticalscrollbarlargestep', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxGrid('verticalscrollbarlargestep');\\n            }\\n        }\\n    }, {\\n        key: 'autoresizecolumns',\\n        value: function autoresizecolumns(type) {\\n            JQXLite(this.componentSelector).jqxGrid('autoresizecolumns', type);\\n        }\\n    }, {\\n        key: 'autoresizecolumn',\\n        value: function autoresizecolumn(dataField, type) {\\n            JQXLite(this.componentSelector).jqxGrid('autoresizecolumn', dataField, type);\\n        }\\n    }, {\\n        key: 'beginupdate',\\n        value: function beginupdate() {\\n            JQXLite(this.componentSelector).jqxGrid('beginupdate');\\n        }\\n    }, {\\n        key: 'clear',\\n        value: function clear() {\\n            JQXLite(this.componentSelector).jqxGrid('clear');\\n        }\\n    }, {\\n        key: 'destroy',\\n        value: function destroy() {\\n            JQXLite(this.componentSelector).jqxGrid('destroy');\\n        }\\n    }, {\\n        key: 'endupdate',\\n        value: function endupdate() {\\n            JQXLite(this.componentSelector).jqxGrid('endupdate');\\n        }\\n    }, {\\n        key: 'ensurerowvisible',\\n        value: function ensurerowvisible(rowBoundIndex) {\\n            JQXLite(this.componentSelector).jqxGrid('ensurerowvisible', rowBoundIndex);\\n        }\\n    }, {\\n        key: 'focus',\\n        value: function focus() {\\n            JQXLite(this.componentSelector).jqxGrid('focus');\\n        }\\n    }, {\\n        key: 'getcolumnindex',\\n        value: function getcolumnindex(dataField) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcolumnindex', dataField);\\n        }\\n    }, {\\n        key: 'getcolumn',\\n        value: function getcolumn(dataField) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcolumn', dataField);\\n        }\\n    }, {\\n        key: 'getcolumnproperty',\\n        value: function getcolumnproperty(dataField, propertyName) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcolumnproperty', dataField, propertyName);\\n        }\\n    }, {\\n        key: 'getrowid',\\n        value: function getrowid(rowBoundIndex) {\\n            return JQXLite(this.componentSelector).jqxGrid('getrowid', rowBoundIndex);\\n        }\\n    }, {\\n        key: 'getrowdata',\\n        value: function getrowdata(rowBoundIndex) {\\n            return JQXLite(this.componentSelector).jqxGrid('getrowdata', rowBoundIndex);\\n        }\\n    }, {\\n        key: 'getrowdatabyid',\\n        value: function getrowdatabyid(rowID) {\\n            return JQXLite(this.componentSelector).jqxGrid('getrowdatabyid', rowID);\\n        }\\n    }, {\\n        key: 'getrowboundindexbyid',\\n        value: function getrowboundindexbyid(rowID) {\\n            return JQXLite(this.componentSelector).jqxGrid('getrowboundindexbyid', rowID);\\n        }\\n    }, {\\n        key: 'getrowboundindex',\\n        value: function getrowboundindex(rowDisplayIndex) {\\n            return JQXLite(this.componentSelector).jqxGrid('getrowboundindex', rowDisplayIndex);\\n        }\\n    }, {\\n        key: 'getrows',\\n        value: function getrows() {\\n            return JQXLite(this.componentSelector).jqxGrid('getrows');\\n        }\\n    }, {\\n        key: 'getboundrows',\\n        value: function getboundrows() {\\n            return JQXLite(this.componentSelector).jqxGrid('getboundrows');\\n        }\\n    }, {\\n        key: 'getdisplayrows',\\n        value: function getdisplayrows() {\\n            return JQXLite(this.componentSelector).jqxGrid('getdisplayrows');\\n        }\\n    }, {\\n        key: 'getdatainformation',\\n        value: function getdatainformation() {\\n            return JQXLite(this.componentSelector).jqxGrid('getdatainformation');\\n        }\\n    }, {\\n        key: 'getsortinformation',\\n        value: function getsortinformation() {\\n            return JQXLite(this.componentSelector).jqxGrid('getsortinformation');\\n        }\\n    }, {\\n        key: 'getpaginginformation',\\n        value: function getpaginginformation() {\\n            return JQXLite(this.componentSelector).jqxGrid('getpaginginformation');\\n        }\\n    }, {\\n        key: 'hidecolumn',\\n        value: function hidecolumn(dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('hidecolumn', dataField);\\n        }\\n    }, {\\n        key: 'hideloadelement',\\n        value: function hideloadelement() {\\n            JQXLite(this.componentSelector).jqxGrid('hideloadelement');\\n        }\\n    }, {\\n        key: 'hiderowdetails',\\n        value: function hiderowdetails(rowBoundIndex) {\\n            JQXLite(this.componentSelector).jqxGrid('hiderowdetails', rowBoundIndex);\\n        }\\n    }, {\\n        key: 'iscolumnvisible',\\n        value: function iscolumnvisible(dataField) {\\n            return JQXLite(this.componentSelector).jqxGrid('iscolumnvisible', dataField);\\n        }\\n    }, {\\n        key: 'iscolumnpinned',\\n        value: function iscolumnpinned(dataField) {\\n            return JQXLite(this.componentSelector).jqxGrid('iscolumnpinned', dataField);\\n        }\\n    }, {\\n        key: 'localizestrings',\\n        value: function localizestrings(localizationobject) {\\n            JQXLite(this.componentSelector).jqxGrid('localizestrings', localizationobject);\\n        }\\n    }, {\\n        key: 'pincolumn',\\n        value: function pincolumn(dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('pincolumn', dataField);\\n        }\\n    }, {\\n        key: 'refreshdata',\\n        value: function refreshdata() {\\n            JQXLite(this.componentSelector).jqxGrid('refreshdata');\\n        }\\n    }, {\\n        key: 'refresh',\\n        value: function refresh() {\\n            JQXLite(this.componentSelector).jqxGrid('refresh');\\n        }\\n    }, {\\n        key: 'performRender',\\n        value: function performRender() {\\n            JQXLite(this.componentSelector).jqxGrid('render');\\n        }\\n    }, {\\n        key: 'scrolloffset',\\n        value: function scrolloffset(top, left) {\\n            JQXLite(this.componentSelector).jqxGrid('scrolloffset', top, left);\\n        }\\n    }, {\\n        key: 'scrollposition',\\n        value: function scrollposition() {\\n            return JQXLite(this.componentSelector).jqxGrid('scrollposition');\\n        }\\n    }, {\\n        key: 'showloadelement',\\n        value: function showloadelement() {\\n            JQXLite(this.componentSelector).jqxGrid('showloadelement');\\n        }\\n    }, {\\n        key: 'showrowdetails',\\n        value: function showrowdetails(rowBoundIndex) {\\n            JQXLite(this.componentSelector).jqxGrid('showrowdetails', rowBoundIndex);\\n        }\\n    }, {\\n        key: 'setcolumnindex',\\n        value: function setcolumnindex(dataField, index) {\\n            JQXLite(this.componentSelector).jqxGrid('setcolumnindex', dataField, index);\\n        }\\n    }, {\\n        key: 'setcolumnproperty',\\n        value: function setcolumnproperty(dataField, propertyName, propertyValue) {\\n            JQXLite(this.componentSelector).jqxGrid('setcolumnproperty', dataField, propertyName, propertyValue);\\n        }\\n    }, {\\n        key: 'showcolumn',\\n        value: function showcolumn(dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('showcolumn', dataField);\\n        }\\n    }, {\\n        key: 'unpincolumn',\\n        value: function unpincolumn(dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('unpincolumn', dataField);\\n        }\\n    }, {\\n        key: 'updatebounddata',\\n        value: function updatebounddata(type) {\\n            JQXLite(this.componentSelector).jqxGrid('updatebounddata', type);\\n        }\\n    }, {\\n        key: 'updating',\\n        value: function updating() {\\n            return JQXLite(this.componentSelector).jqxGrid('updating');\\n        }\\n    }, {\\n        key: 'getsortcolumn',\\n        value: function getsortcolumn() {\\n            return JQXLite(this.componentSelector).jqxGrid('getsortcolumn');\\n        }\\n    }, {\\n        key: 'removesort',\\n        value: function removesort() {\\n            JQXLite(this.componentSelector).jqxGrid('removesort');\\n        }\\n    }, {\\n        key: 'sortby',\\n        value: function sortby(dataField, sortOrder) {\\n            JQXLite(this.componentSelector).jqxGrid('sortby', dataField, sortOrder);\\n        }\\n    }, {\\n        key: 'addgroup',\\n        value: function addgroup(dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('addgroup', dataField);\\n        }\\n    }, {\\n        key: 'cleargroups',\\n        value: function cleargroups() {\\n            JQXLite(this.componentSelector).jqxGrid('cleargroups');\\n        }\\n    }, {\\n        key: 'collapsegroup',\\n        value: function collapsegroup(group) {\\n            JQXLite(this.componentSelector).jqxGrid('collapsegroup', group);\\n        }\\n    }, {\\n        key: 'collapseallgroups',\\n        value: function collapseallgroups() {\\n            JQXLite(this.componentSelector).jqxGrid('collapseallgroups');\\n        }\\n    }, {\\n        key: 'expandallgroups',\\n        value: function expandallgroups() {\\n            JQXLite(this.componentSelector).jqxGrid('expandallgroups');\\n        }\\n    }, {\\n        key: 'expandgroup',\\n        value: function expandgroup(group) {\\n            JQXLite(this.componentSelector).jqxGrid('expandgroup', group);\\n        }\\n    }, {\\n        key: 'getrootgroupscount',\\n        value: function getrootgroupscount() {\\n            return JQXLite(this.componentSelector).jqxGrid('getrootgroupscount');\\n        }\\n    }, {\\n        key: 'getgroup',\\n        value: function getgroup(groupIndex) {\\n            return JQXLite(this.componentSelector).jqxGrid('getgroup', groupIndex);\\n        }\\n    }, {\\n        key: 'insertgroup',\\n        value: function insertgroup(groupIndex, dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('insertgroup', groupIndex, dataField);\\n        }\\n    }, {\\n        key: 'iscolumngroupable',\\n        value: function iscolumngroupable() {\\n            return JQXLite(this.componentSelector).jqxGrid('iscolumngroupable');\\n        }\\n    }, {\\n        key: 'removegroupat',\\n        value: function removegroupat(groupIndex) {\\n            JQXLite(this.componentSelector).jqxGrid('removegroupat', groupIndex);\\n        }\\n    }, {\\n        key: 'removegroup',\\n        value: function removegroup(dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('removegroup', dataField);\\n        }\\n    }, {\\n        key: 'addfilter',\\n        value: function addfilter(dataField, filterGroup, refreshGrid) {\\n            JQXLite(this.componentSelector).jqxGrid('addfilter', dataField, filterGroup, refreshGrid);\\n        }\\n    }, {\\n        key: 'applyfilters',\\n        value: function applyfilters() {\\n            JQXLite(this.componentSelector).jqxGrid('applyfilters');\\n        }\\n    }, {\\n        key: 'clearfilters',\\n        value: function clearfilters() {\\n            JQXLite(this.componentSelector).jqxGrid('clearfilters');\\n        }\\n    }, {\\n        key: 'getfilterinformation',\\n        value: function getfilterinformation() {\\n            return JQXLite(this.componentSelector).jqxGrid('getfilterinformation');\\n        }\\n    }, {\\n        key: 'getcolumnat',\\n        value: function getcolumnat(index) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcolumnat', index);\\n        }\\n    }, {\\n        key: 'removefilter',\\n        value: function removefilter(dataField, refreshGrid) {\\n            JQXLite(this.componentSelector).jqxGrid('removefilter', dataField, refreshGrid);\\n        }\\n    }, {\\n        key: 'refreshfilterrow',\\n        value: function refreshfilterrow() {\\n            JQXLite(this.componentSelector).jqxGrid('refreshfilterrow');\\n        }\\n    }, {\\n        key: 'gotopage',\\n        value: function gotopage(pagenumber) {\\n            JQXLite(this.componentSelector).jqxGrid('gotopage', pagenumber);\\n        }\\n    }, {\\n        key: 'gotoprevpage',\\n        value: function gotoprevpage() {\\n            JQXLite(this.componentSelector).jqxGrid('gotoprevpage');\\n        }\\n    }, {\\n        key: 'gotonextpage',\\n        value: function gotonextpage() {\\n            JQXLite(this.componentSelector).jqxGrid('gotonextpage');\\n        }\\n    }, {\\n        key: 'addrow',\\n        value: function addrow(rowIds, data, rowPosition) {\\n            JQXLite(this.componentSelector).jqxGrid('addrow', rowIds, data, rowPosition);\\n        }\\n    }, {\\n        key: 'begincelledit',\\n        value: function begincelledit(rowBoundIndex, dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('begincelledit', rowBoundIndex, dataField);\\n        }\\n    }, {\\n        key: 'beginrowedit',\\n        value: function beginrowedit(rowBoundIndex) {\\n            JQXLite(this.componentSelector).jqxGrid('beginrowedit', rowBoundIndex);\\n        }\\n    }, {\\n        key: 'closemenu',\\n        value: function closemenu() {\\n            JQXLite(this.componentSelector).jqxGrid('closemenu');\\n        }\\n    }, {\\n        key: 'deleterow',\\n        value: function deleterow(rowIds) {\\n            JQXLite(this.componentSelector).jqxGrid('deleterow', rowIds);\\n        }\\n    }, {\\n        key: 'endcelledit',\\n        value: function endcelledit(rowBoundIndex, dataField, confirmChanges) {\\n            JQXLite(this.componentSelector).jqxGrid('endcelledit', rowBoundIndex, dataField, confirmChanges);\\n        }\\n    }, {\\n        key: 'endrowedit',\\n        value: function endrowedit(rowBoundIndex, confirmChanges) {\\n            JQXLite(this.componentSelector).jqxGrid('endrowedit', rowBoundIndex, confirmChanges);\\n        }\\n    }, {\\n        key: 'getcell',\\n        value: function getcell(rowBoundIndex, datafield) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcell', rowBoundIndex, datafield);\\n        }\\n    }, {\\n        key: 'getcellatposition',\\n        value: function getcellatposition(left, top) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcellatposition', left, top);\\n        }\\n    }, {\\n        key: 'getcelltext',\\n        value: function getcelltext(rowBoundIndex, dataField) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcelltext', rowBoundIndex, dataField);\\n        }\\n    }, {\\n        key: 'getcelltextbyid',\\n        value: function getcelltextbyid(rowID, dataField) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcelltextbyid', rowID, dataField);\\n        }\\n    }, {\\n        key: 'getcellvaluebyid',\\n        value: function getcellvaluebyid(rowID, dataField) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcellvaluebyid', rowID, dataField);\\n        }\\n    }, {\\n        key: 'getcellvalue',\\n        value: function getcellvalue(rowBoundIndex, dataField) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcellvalue', rowBoundIndex, dataField);\\n        }\\n    }, {\\n        key: 'isBindingCompleted',\\n        value: function isBindingCompleted() {\\n            return JQXLite(this.componentSelector).jqxGrid('isBindingCompleted');\\n        }\\n    }, {\\n        key: 'openmenu',\\n        value: function openmenu(dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('openmenu', dataField);\\n        }\\n    }, {\\n        key: 'setcellvalue',\\n        value: function setcellvalue(rowBoundIndex, dataField, value) {\\n            JQXLite(this.componentSelector).jqxGrid('setcellvalue', rowBoundIndex, dataField, value);\\n        }\\n    }, {\\n        key: 'setcellvaluebyid',\\n        value: function setcellvaluebyid(rowID, dataField, value) {\\n            JQXLite(this.componentSelector).jqxGrid('setcellvaluebyid', rowID, dataField, value);\\n        }\\n    }, {\\n        key: 'showvalidationpopup',\\n        value: function showvalidationpopup(rowBoundIndex, dataField, validationMessage) {\\n            JQXLite(this.componentSelector).jqxGrid('showvalidationpopup', rowBoundIndex, dataField, validationMessage);\\n        }\\n    }, {\\n        key: 'updaterow',\\n        value: function updaterow(rowIds, data) {\\n            JQXLite(this.componentSelector).jqxGrid('updaterow', rowIds, data);\\n        }\\n    }, {\\n        key: 'clearselection',\\n        value: function clearselection() {\\n            JQXLite(this.componentSelector).jqxGrid('clearselection');\\n        }\\n    }, {\\n        key: 'getselectedrowindex',\\n        value: function getselectedrowindex() {\\n            return JQXLite(this.componentSelector).jqxGrid('getselectedrowindex');\\n        }\\n    }, {\\n        key: 'getselectedrowindexes',\\n        value: function getselectedrowindexes() {\\n            return JQXLite(this.componentSelector).jqxGrid('getselectedrowindexes');\\n        }\\n    }, {\\n        key: 'getselectedcell',\\n        value: function getselectedcell() {\\n            return JQXLite(this.componentSelector).jqxGrid('getselectedcell');\\n        }\\n    }, {\\n        key: 'getselectedcells',\\n        value: function getselectedcells() {\\n            return JQXLite(this.componentSelector).jqxGrid('getselectedcells');\\n        }\\n    }, {\\n        key: 'selectcell',\\n        value: function selectcell(rowBoundIndex, dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('selectcell', rowBoundIndex, dataField);\\n        }\\n    }, {\\n        key: 'selectallrows',\\n        value: function selectallrows() {\\n            JQXLite(this.componentSelector).jqxGrid('selectallrows');\\n        }\\n    }, {\\n        key: 'selectrow',\\n        value: function selectrow(rowBoundIndex) {\\n            JQXLite(this.componentSelector).jqxGrid('selectrow', rowBoundIndex);\\n        }\\n    }, {\\n        key: 'unselectrow',\\n        value: function unselectrow(rowBoundIndex) {\\n            JQXLite(this.componentSelector).jqxGrid('unselectrow', rowBoundIndex);\\n        }\\n    }, {\\n        key: 'unselectcell',\\n        value: function unselectcell(rowBoundIndex, dataField) {\\n            JQXLite(this.componentSelector).jqxGrid('unselectcell', rowBoundIndex, dataField);\\n        }\\n    }, {\\n        key: 'getcolumnaggregateddata',\\n        value: function getcolumnaggregateddata(dataField, aggregates) {\\n            return JQXLite(this.componentSelector).jqxGrid('getcolumnaggregateddata', dataField, aggregates);\\n        }\\n    }, {\\n        key: 'refreshaggregates',\\n        value: function refreshaggregates() {\\n            JQXLite(this.componentSelector).jqxGrid('refreshaggregates');\\n        }\\n    }, {\\n        key: 'renderaggregates',\\n        value: function renderaggregates() {\\n            JQXLite(this.componentSelector).jqxGrid('renderaggregates');\\n        }\\n    }, {\\n        key: 'exportdata',\\n        value: function exportdata(dataType, fileName, exportHeader, rows, exportHiddenColumns, serverURL, charSet) {\\n            return JQXLite(this.componentSelector).jqxGrid('exportdata', dataType, fileName, exportHeader, rows, exportHiddenColumns, serverURL, charSet);\\n        }\\n    }, {\\n        key: 'getstate',\\n        value: function getstate() {\\n            return JQXLite(this.componentSelector).jqxGrid('getstate');\\n        }\\n    }, {\\n        key: 'loadstate',\\n        value: function loadstate(stateobject) {\\n            JQXLite(this.componentSelector).jqxGrid('loadstate', stateobject);\\n        }\\n    }, {\\n        key: 'savestate',\\n        value: function savestate() {\\n            return JQXLite(this.componentSelector).jqxGrid('savestate');\\n        }\\n    }, {\\n        key: 'render',\\n        value: function render() {\\n            var id = 'jqxGrid' + JQXLite.generateID();\\n            this.componentSelector = '#' + id;\\n            return _react2.default.createElement(\\n                'div',\\n                { id: id },\\n                this.props.value,\\n                this.props.children\\n            );\\n        }\\n    }]);\\n\\n    return JqxGrid;\\n}(_react2.default.Component);\\n\\nexports.default = JqxGrid;\\n;\\n\\n\\u002F***\\u002F }),\\n\\n\\u002F***\\u002F 67:\\n\\u002F***\\u002F (function(module, exports, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports.jqx = undefined;\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i \\u003C props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _react = __webpack_require__(0);\\n\\nvar _react2 = _interopRequireDefault(_react);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } \\u002F*\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               jQWidgets v5.5.0 (2017-Dec)\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Copyright (c) 2011-2017 jQWidgets.\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               License: https:\\u002F\\u002Fjqwidgets.com\\u002Flicense\\u002F\\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *\\u002F\\n\\nvar JQXLite = window.JQXLite;\\n\\nvar jqx = exports.jqx = window.jqx;\\n\\nvar JqxInput = function (_React$Component) {\\n    _inherits(JqxInput, _React$Component);\\n\\n    function JqxInput() {\\n        _classCallCheck(this, JqxInput);\\n\\n        return _possibleConstructorReturn(this, (JqxInput.__proto__ || Object.getPrototypeOf(JqxInput)).apply(this, arguments));\\n    }\\n\\n    _createClass(JqxInput, [{\\n        key: 'componentDidMount',\\n        value: function componentDidMount() {\\n            var options = this.manageAttributes();\\n            this.createComponent(options);\\n            this.val(this.props.value);\\n        }\\n    }, {\\n        key: 'manageAttributes',\\n        value: function manageAttributes() {\\n            var properties = ['disabled', 'dropDownWidth', 'displayMember', 'height', 'items', 'minLength', 'maxLength', 'opened', 'placeHolder', 'popupZIndex', 'query', 'renderer', 'rtl', 'searchMode', 'source', 'theme', 'valueMember', 'width', 'value'];\\n            var options = {};\\n            for (var item in this.props) {\\n                if (item === 'settings') {\\n                    for (var itemTwo in this.props[item]) {\\n                        options[itemTwo] = this.props[item][itemTwo];\\n                    }\\n                } else {\\n                    if (properties.indexOf(item) !== -1) {\\n                        options[item] = this.props[item];\\n                    }\\n                }\\n            }\\n            return options;\\n        }\\n    }, {\\n        key: 'createComponent',\\n        value: function createComponent(options) {\\n            if (!this.style) {\\n                for (var style in this.props.style) {\\n                    JQXLite(this.componentSelector).css(style, this.props.style[style]);\\n                }\\n            }\\n            if (this.props.className !== undefined) {\\n                var classes = this.props.className.split(' ');\\n                for (var i = 0; i \\u003C classes.length; i++) {\\n                    JQXLite(this.componentSelector).addClass(classes[i]);\\n                }\\n            }\\n            if (!this.template) {\\n                JQXLite(this.componentSelector).html(this.props.template);\\n            }\\n            JQXLite(this.componentSelector).jqxInput(options);\\n        }\\n    }, {\\n        key: 'setOptions',\\n        value: function setOptions(options) {\\n            JQXLite(this.componentSelector).jqxInput('setOptions', options);\\n        }\\n    }, {\\n        key: 'getOptions',\\n        value: function getOptions() {\\n            if (arguments.length === 0) {\\n                throw Error('At least one argument expected in getOptions()!');\\n            }\\n            var resultToReturn = {};\\n            for (var i = 0; i \\u003C arguments.length; i++) {\\n                resultToReturn[arguments[i]] = JQXLite(this.componentSelector).jqxInput(arguments[i]);\\n            }\\n            return resultToReturn;\\n        }\\n    }, {\\n        key: 'on',\\n        value: function on(name, callbackFn) {\\n            JQXLite(this.componentSelector).on(name, callbackFn);\\n        }\\n    }, {\\n        key: 'off',\\n        value: function off(name) {\\n            JQXLite(this.componentSelector).off(name);\\n        }\\n    }, {\\n        key: 'disabled',\\n        value: function disabled(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('disabled', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('disabled');\\n            }\\n        }\\n    }, {\\n        key: 'dropDownWidth',\\n        value: function dropDownWidth(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('dropDownWidth', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('dropDownWidth');\\n            }\\n        }\\n    }, {\\n        key: 'displayMember',\\n        value: function displayMember(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('displayMember', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('displayMember');\\n            }\\n        }\\n    }, {\\n        key: 'height',\\n        value: function height(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('height', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('height');\\n            }\\n        }\\n    }, {\\n        key: 'items',\\n        value: function items(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('items', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('items');\\n            }\\n        }\\n    }, {\\n        key: 'minLength',\\n        value: function minLength(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('minLength', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('minLength');\\n            }\\n        }\\n    }, {\\n        key: 'maxLength',\\n        value: function maxLength(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('maxLength', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('maxLength');\\n            }\\n        }\\n    }, {\\n        key: 'opened',\\n        value: function opened(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('opened', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('opened');\\n            }\\n        }\\n    }, {\\n        key: 'placeHolder',\\n        value: function placeHolder(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('placeHolder', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('placeHolder');\\n            }\\n        }\\n    }, {\\n        key: 'popupZIndex',\\n        value: function popupZIndex(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('popupZIndex', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('popupZIndex');\\n            }\\n        }\\n    }, {\\n        key: 'query',\\n        value: function query(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('query', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('query');\\n            }\\n        }\\n    }, {\\n        key: 'renderer',\\n        value: function renderer(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('renderer', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('renderer');\\n            }\\n        }\\n    }, {\\n        key: 'rtl',\\n        value: function rtl(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('rtl', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('rtl');\\n            }\\n        }\\n    }, {\\n        key: 'searchMode',\\n        value: function searchMode(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('searchMode', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('searchMode');\\n            }\\n        }\\n    }, {\\n        key: 'source',\\n        value: function source(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('source', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('source');\\n            }\\n        }\\n    }, {\\n        key: 'theme',\\n        value: function theme(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('theme', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('theme');\\n            }\\n        }\\n    }, {\\n        key: 'valueMember',\\n        value: function valueMember(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('valueMember', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('valueMember');\\n            }\\n        }\\n    }, {\\n        key: 'width',\\n        value: function width(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('width', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('width');\\n            }\\n        }\\n    }, {\\n        key: 'value',\\n        value: function value(arg) {\\n            if (arg !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('value', arg);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('value');\\n            }\\n        }\\n    }, {\\n        key: 'destroy',\\n        value: function destroy() {\\n            JQXLite(this.componentSelector).jqxInput('destroy');\\n        }\\n    }, {\\n        key: 'focus',\\n        value: function focus() {\\n            JQXLite(this.componentSelector).jqxInput('focus');\\n        }\\n    }, {\\n        key: 'selectAll',\\n        value: function selectAll() {\\n            JQXLite(this.componentSelector).jqxInput('selectAll');\\n        }\\n    }, {\\n        key: 'val',\\n        value: function val(value) {\\n            if (value !== undefined) {\\n                JQXLite(this.componentSelector).jqxInput('val', value);\\n            } else {\\n                return JQXLite(this.componentSelector).jqxInput('val');\\n            }\\n        }\\n    }, {\\n        key: 'render',\\n        value: function render() {\\n            var id = 'jqxInput' + JQXLite.generateID();\\n            this.componentSelector = '#' + id;\\n            return _react2.default.createElement('input', { type: 'text', id: id });\\n        }\\n    }]);\\n\\n    return JqxInput;\\n}(_react2.default.Component);\\n\\nexports.default = JqxInput;\\n;\\n\\n\\u002F***\\u002F })\\n\\n});\"}","integrity":"sha512-nePq5b+DlpBmJn+fu8+cQbK9eRKfTeprGZ/RJI7LMbELzAnGTeyhwxm9kFxI06LUDitGVNNg0WFB1WXbsTLCeg==","time":1515677647029,"size":58246}